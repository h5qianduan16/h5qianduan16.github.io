<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>canvas绘图</title>
      <link href="/2019/07/30/canvas/"/>
      <url>/2019/07/30/canvas/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>#canvas的使用</p><p>1.首先创建一个canvas标签，添加一个id“canvas”，添加宽高属性，切记不是行内样式，直接是<code>width=&#39;600&#39; height=&#39;600&#39;</code>这样创建出的canvas标签的宽高与canvas画布的宽高一致，就不会导致出现鼠标与绘画点出现偏差。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span>你的浏览器不支持，请升级浏览器<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.在script中获取canvas元素，并设置为2d画布。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>)</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</span><br></pre></td></tr></table></figure><p>3.在canvas中线条需要一个起始点和终点，还需要连接起来才成为一条线，下面的例子是平行和交叉。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ctx.strokeStyle=<span class="string">'red'</span></span><br><span class="line"><span class="comment">//平行线</span></span><br><span class="line">ctx.moveTo(<span class="number">50</span>, <span class="number">50.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">50.5</span>)</span><br><span class="line">ctx.moveTo(<span class="number">50</span>, <span class="number">80.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">80.5</span>);</span><br><span class="line">ctx.stroke()</span><br><span class="line">ctx.beginPath()</span><br><span class="line"><span class="comment">//交叉线</span></span><br><span class="line">ctx.moveTo(<span class="number">50</span>, <span class="number">100.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">110.5</span>);</span><br><span class="line">ctx.moveTo(<span class="number">50</span>, <span class="number">110.5</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">100.5</span>);</span><br><span class="line">ctx.strokeStyle=<span class="string">'blue'</span></span><br><span class="line">ctx.stroke()</span><br></pre></td></tr></table></figure><p>效果图</p><img src="/2019/07/30/canvas/Snipaste.jpg" title="平行和交叉"><p>在上述例子中可以看出，stroke（）方法是进行线条的连接的，并且可以设置样式为红色通过strokeStyle,还可以发现同时设置两种颜色都可以展示出来，这就是beginPath（）方法的作用</p><p>4.运用canvas绘制一个三角形</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三角形</span></span><br><span class="line">       ctx.moveTo(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">       ctx.lineTo(<span class="number">50</span>, <span class="number">100.5</span>);</span><br><span class="line">       ctx.lineTo(<span class="number">200</span>, <span class="number">75.5</span>);</span><br><span class="line">       ctx.strokeStyle=<span class="string">'blue'</span></span><br><span class="line">       ctx.lineWidth=<span class="number">2</span></span><br><span class="line">       ctx.fillStyle=<span class="string">'#668204'</span></span><br><span class="line">       ctx.closePath()</span><br><span class="line">       ctx.fill()</span><br><span class="line">      <span class="comment">// ctx.lineTo(50, 50);</span></span><br><span class="line">       ctx.stroke()</span><br></pre></td></tr></table></figure><p>首先确定一个起点坐标，创建两个终点坐标，猜测是从起点到第一个终点，再将第一个终点当做起点到第二个终点，这样就可以解释为什么闭合三角形的那条线最终<br>指向了开始的起始点。还有方法closePath()会直接闭合。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
